<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unfunction</title>
    <link>https://rhaeguard.github.io/</link>
    <description>Recent content on unfunction</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Aug 2022 21:30:04 +0800</lastBuildDate><atom:link href="https://rhaeguard.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to parse JSON using shift-reduce parsing approach</title>
      <link>https://rhaeguard.github.io/posts/json-parsing-shift-reduce/</link>
      <pubDate>Thu, 09 Nov 2023 01:12:33 -0600</pubDate>
      
      <guid>https://rhaeguard.github.io/posts/json-parsing-shift-reduce/</guid>
      <description>Parsing JSON is something that the majority of programmers have done. Almost all languages have means to deserialize (unmarshall) JSON from text into some data structure. In this article, we are going to try doing exactly that.
Grammar Just like in natural languages, the programming languages and various data formats have a grammar. The grammar consists of rules that show how the text input needs to be structured. For JSON the following is a simplified version of a part of the grammar:</description>
    </item>
    
    <item>
      <title>How to build a regex engine from scratch</title>
      <link>https://rhaeguard.github.io/posts/regex/</link>
      <pubDate>Sat, 07 Oct 2023 01:40:33 -0600</pubDate>
      
      <guid>https://rhaeguard.github.io/posts/regex/</guid>
      <description>In this article, we&amp;rsquo;ll build a simple regular expression engine that will be able to use [a-zA-Z][a-zA-Z0-9_.]+@[a-zA-Z0-9]+.[a-zA-Z]{2,} pattern (. is used as literal instead of any character) to check for the validity of email addresses. We will use Golang. The article is divided into 3 sections:
Parsing Building the state machine Matching Parsing On its own, a regex string is just that &amp;mdash; a string. We need to transform it into something that has a structure.</description>
    </item>
    
  </channel>
</rss>
