<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on unfunction</title>
    <link>https://rhaeguard.github.io/posts/</link>
    <description>Recent content in Posts on unfunction</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Oct 2023 01:40:33 -0600</lastBuildDate><atom:link href="https://rhaeguard.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to build a regex engine from scratch</title>
      <link>https://rhaeguard.github.io/posts/regex/</link>
      <pubDate>Sat, 07 Oct 2023 01:40:33 -0600</pubDate>
      
      <guid>https://rhaeguard.github.io/posts/regex/</guid>
      <description>In this article, we&amp;rsquo;ll build a simple regular expression engine that will be able to use [a-zA-Z][a-zA-Z0-9_.]+@[a-zA-Z0-9]+.[a-zA-Z]{2,} pattern (. is used as literal instead of any character) to check for the validity of email addresses. We will use Golang. The article is divided into 3 sections:
Parsing Building the state machine Matching Parsing On its own, a regex string is just that &amp;mdash; a string. We need to transform it into something that has a structure.</description>
    </item>
    
  </channel>
</rss>
